/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 6 "Iodine_GoLang_to_dll.go"
 #include <stdio.h>
 #include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern int getErrorCode();

//designed for C api

extern void setErrorCode(int p0);

extern int undo();

extern int redo();

extern void startGroup();

extern void endGroup();

extern void cFree(char* p0);

extern char* getErrorMessage();

extern char* getDetailErrorMessage();

//errCode -3: ID repeat, 0 :ok

extern int newNetwork(char* p0);

//return:  -2: net ID can't find, >=0: ok

extern int getNetworkIndex(char* p0);

//errCode:  0:ok, -5: net index out of range
//-10: "Json convert error", -11: "File error",

extern int saveNetworkAsJSON(int p0, char* p1);

//errCode -3: name repeat, 0 :ok
//-10: "Json convert error", -11: "File error",

extern int readNetworkFromJSON(char* p0);

//errCode:  0:ok, -5: net index out of range

extern int deleteNetwork(int p0);

extern void clearNetworks();

//no error handling

extern int getNumberOfNetworks();

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -5: net index out of range

extern char* getNetworkID(int p0);

//return -3: ID repeat, 0 :ok
//-5: net index out of range
//-12: Variable out of range:

extern int addNode(int p0, char* p1, float p2, float p3, float p4, float p5);

//return:  -2: node ID can't find, >=0: ok
//-5: net index out of range

extern int getNodeIndex(int p0, char* p1);

//flag: 0: ok, -7: node index out of range,
//-4: node is not free
//-5: net index out of range

extern int deleteNode(int p0, int p1);

//-5: net index out of range

extern int clearNetwork(int p0);

//-5: net index out of range

extern int getNumberOfNodes(int p0);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeCenterX(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeCenterY(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern char* getNodeID(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeX(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeY(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeW(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeH(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern unsigned int getNodeFillColorRGB(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeFillColorAlpha(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern unsigned int getNodeOutlineColorRGB(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeOutlineColorAlpha(int p0, int p1);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeOutlineThickness(int p0, int p1);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern int getNodeFontPointSize(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern char* getNodeFontFamily(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern char* getNodeFontStyle(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern char* getNodeFontWeight(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern char* getNodeFontName(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern unsigned int getNodeFontColorRGB(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -7: node index out of range
//-5: net index out of range

extern float getNodeFontColorAlpha(int p0, int p1);

//setNodeID set the id of a node
//errCode -3: id repeat, 0 :ok
//-5: net index out of range
//-7: node index out of range

extern int setNodeID(int p0, int p1, char* p2);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeCoordinate(int p0, int p1, float p2, float p3);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeSize(int p0, int p1, float p2, float p3);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeFillColorRGB(int p0, int p1, int p2, int p3, int p4);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeFillColorAlpha(int p0, int p1, float p2);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeOutlineColorRGB(int p0, int p1, int p2, int p3, int p4);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeOutlineColorAlpha(int p0, int p1, float p2);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range

extern int setNodeOutlineThickness(int p0, int p1, float p2);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range

extern int setNodeFontPointSize(int p0, int p1, int p2);

//setNodeFontFamily set the fontFamily of a node
//errCode 5: net index out of range
//-12: Variable out of range

extern int setNodeFontFamily(int p0, int p1, char* p2);

//setNodeFontStyle set the fontStyle of a node
//errCode 5: net index out of range
//-12: Variable out of range

extern int setNodeFontStyle(int p0, int p1, char* p2);

//setNodeFontWeight set the fontWeight of a node
//errCode 5: net index out of range
//-12: Variable out of range

extern int setNodeFontWeight(int p0, int p1, char* p2);

//setNodeFontName set the FontName of a node
//errCode 5: net index out of range
//-12: Variable out of range

extern int setNodeFontName(int p0, int p1, char* p2);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeFontColorRGB(int p0, int p1, int p2, int p3, int p4);

//errCode: 0:ok, -7: node index out of range
//-5: net index out of range
//-12: Variable out of range:

extern int setNodeFontColorAlpha(int p0, int p1, float p2);

//errCode: 0: ok, -3: ID repeat
//-5: net index out of range

extern int createReaction(int p0, char* p1);

//return: -2: ID can't find, >=0: ok
//-5: net index out of range

extern int getReactionIndex(int p0, char* p1);

//errCode:  0:ok, -6: reaction index out of range
//-5: net index out of range

extern int deleteReaction(int p0, int p1);

extern int clearReactions(int p0);

//return: >=0: ok, -5: net index out of range

extern int getNumberOfReactions(int p0);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern char* getReactionID(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern char* getReactionRateLaw(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern unsigned int getReactionFillColorRGB(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern float getReactionFillColorAlpha(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern float getReactionLineThickness(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern float getReactionCenterHandleX(int p0, int p1);

//getErrorCode() is needed after this function in API
//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern float getReactionCenterHandleY(int p0, int p1);

//getErrorCode() is needed after this function in API
//return: positive int: ok, -6: reaction index out of range,
//-5: net index out of range, -2: name not found

extern float getReactionSrcNodeStoich(int p0, int p1, char* p2);

//getErrorCode() is needed after this function in API
//return: positive int: ok, -6: reaction index out of range,
//-5: net index out of range, -2: name not found

extern float getReactionDestNodeStoich(int p0, int p1, char* p2);

//getErrorCode() is needed after this function in API
//return: positive int: ok, -6: reaction index out of range,
//-5: net index out of range, -2: name not found

extern float getReactionSrcNodeHandleX(int p0, int p1, char* p2);

//getErrorCode() is needed after this function in API
//return: positive int: ok, -6: reaction index out of range,
//-5: net index out of range, -2: name not found

extern float getReactionSrcNodeHandleY(int p0, int p1, char* p2);

//getErrorCode() is needed after this function in API
//return: positive int: ok, -6: reaction index out of range,
//-5: net index out of range, -2: name not found

extern float getReactionDestNodeHandleX(int p0, int p1, char* p2);

//getErrorCode() is needed after this function in API
//return: positive int: ok, -6: reaction index out of range,
//-5: net index out of range, -2: name not found

extern float getReactionDestNodeHandleY(int p0, int p1, char* p2);

//return: non-negative int: ok, -6: reaction index out of range
//-5: net index out of range

extern int getNumberOfSrcNodes(int p0, int p1);

//return: non-negative int: ok, -6: reaction index out of range
//-5: net index out of range

extern int getNumberOfDestNodes(int p0, int p1);

// store list in var nodeList, need getReactionNodeID(index int) to get ID one by one
//return: non-negative int: ok, -6: reaction index out of range
//-5: net index out of range

extern int getListOfReactionSrcNodes(int p0, int p1);

// store list in var nodeList, need getReactionNodeID(index int) to get ID one by one
//return: non-negative int: ok, -6: reaction index out of range
//-5: net index out of range

extern int getListOfReactionDestNodes(int p0, int p1);

//used in APi functions getListOfReactionSrc/DestNodes()

extern char* getReactionNodeID(GoInt p0);

//errCode:  0:ok, -6: reaction index out of range,
//-7: node index out of range
//-8: "wrong stoich: stoich has to be positive"
//-5: net index out of range

extern int addSrcNode(int p0, int p1, int p2, float p3);

//errCode:  0:ok, -6: reaction index out of range,
//-7: node index out of range
//-8: "wrong stoich: stoich has to be positive"
//-5: net index out of range

extern int addDestNode(int p0, int p1, int p2, float p3);

//errCode: 0:ok, -6: reaction index out of range,
//-7: node index out of range
//-5: net index out of range

extern int deleteSrcNode(int p0, int p1, char* p2);

//errCode: 0:ok, -6: reaction index out of range,
//-7: node index out of range
//-5: net index out of range

extern int deleteDestNode(int p0, int p1, char* p2);

//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range
//-3: id repeat

extern int setReactionID(int p0, int p1, char* p2);

//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern int setRateLaw(int p0, int p1, char* p2);

//errCode: -6: reaction index out of range,
//-5: net index out of range, -2: id not found
//-8: wrong stoich

extern int setReactionSrcNodeStoich(int p0, int p1, char* p2, float p3);

//errCode: -6: reaction index out of range,
//-5: net index out of range, -2: id not found
//-8: wrong stoich

extern int setReactionDestNodeStoich(int p0, int p1, char* p2, float p3);

//errCode: -6: reaction index out of range,
//-5: net index out of range, -2: id not found
//-8: wrong stoich

extern int setReactionSrcNodeHandlePosition(int p0, int p1, char* p2, float p3, float p4);

//errCode: -6: reaction index out of range,
//-5: net index out of range, -2: id not found
//-8: wrong stoich

extern int setReactionDestNodeHandlePosition(int p0, int p1, char* p2, float p3, float p4);

//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern int setReactionFillColorRGB(int p0, int p1, int p2, int p3, int p4);

//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern int setReactionFillColorAlpha(int p0, int p1, float p2);

//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range

extern int setReactionLineThickness(int p0, int p1, float p2);

//errCode: 0:ok, -6: reaction index out of range
//-5: net index out of range
//-12: Variable out of range

extern int setReactionCenterHandlePosition(int p0, int p1, float p2, float p3);

#ifdef __cplusplus
}
#endif
